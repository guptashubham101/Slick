<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

<global-method-security pre-post-annotations="enabled" />

<http use-expressions="true">
		<intercept-url pattern="/user**" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" />
		<intercept-url pattern="/user/**" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" />
		<intercept-url pattern="/chef**" access="hasAnyRole('ROLE_ADMIN','ROLE_CHEF')" />
		<intercept-url pattern="/chef/**" access="hasAnyRole('ROLE_ADMIN','ROLE_CHEF')" />
		<intercept-url pattern="/account**" access="hasAnyRole('ROLE_ADMIN','ROLE_USER','ROLE_CHEF')" />
		<csrf disabled="true" />
		<form-login login-page="/loginport.html"/>
		<logout logout-url="/logout" />
	</http>
	
	
	<authentication-manager>
		<authentication-provider>
	<password-encoder hash="bcrypt" />
	<jdbc-user-service data-source-ref="dataSource"
				authorities-by-username-query=" 
				select userid , roleName from userpersonal as table1, role as table2 where table1.role_id=table2.id and table1.userid = 
				?"
				users-by-username-query=" select userid, upwd, enabled from userpersonal where userid = ?" />
</authentication-provider>

<authentication-provider>
			
			<password-encoder hash="bcrypt" />
			
			<jdbc-user-service data-source-ref="dataSource"
				authorities-by-username-query=" 
				select chefserid , roleName from chefpersonal as table1, role as table2 where table1.role_id=table2.id and table1.chefserid = 
				?"
				users-by-username-query=" select chefserid, chefpwd, enabled from chefpersonal where chefserid = ?" />

		</authentication-provider>
</authentication-manager>


</beans:beans>